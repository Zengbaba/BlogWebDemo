# BlogWebDemo
博客练手项目
整个项目分为三个部分：  
jsp页面部分负责显示，总共有5个jsp页面
login.jsp 登陆页面
publish.jsp 发布文章的页面
show.jsp 查看博客
update.jsp  编辑页面
welcome.jsp  主页，显示用户所有博客的信息

Servlet处理所有jsp页面发送的请求：
ServletLogin 处理用户的登陆请求，调用数据层的方法向数据库查询密码和用户名字，再将反馈信息发送会login.jsp，密码正确向ServletMainpage发送请求
ServletMainpage  生成主页，把数据库中查询到的博客信息储存在Session中供整个会话的页面使用，处理主页发送的各种请求：编辑，删除，查看，发布等等 使用反射机制动态加载需要的方法，操纵javabeans
ServletUpdate/Publish 处理更新和发布，调用相应javaBeans的方法来实现

javaBeans负责数据库有关的具体操作
Model类实现统一的model接口，方便向上转型统一操作
Dao类实现统一的Dao接口，规定其中的基本方法：增删改查，以及实现数据库的连接和关闭操作
test类主要用于各种数据库功能的测试，便于查找bug,已全部注释

数据库设计：
主要有三个table构成：
tb_blog  博客的唯一标识id 6位数字 随机，题目，时间，日期，作者
tb_content 用于储存博客的内容，属性有 :id,题目，内容
tb_user 主要储存用户信息，用于登陆等操作
由于这次数据比较简单，数据库设计并不是很难，但也只实现了基本的增删改查功能，没有深入探究

总结：
基本上只是实现了最最最简单的增删改查功能和登陆功能，但还是遇到了很多问题，但是也收获了很多，比如熟悉了JSP基本对象的一些用法，认识了MVC设计模式
的基本概念，感觉这样的设计的确非常巧妙，分工明确耦合度低，各个部分操作修改起来也十分方便。se的基础也是十分重要的，这次有复习了一些。

问题和改进：
1.性能的优化问题，虽然现在数据量很小，但是感觉很多地方自己写的啰嗦了些，不够简洁高效
2.安全性的问题，登陆时如果出现重复登陆怎么解决？各种请求直接使用get方法传递并没有确认，反复前进后退各种参数的混乱
3.数据库的并发问题,这里虽然不需要处理，但是一篇博客肯定是需要被他人查看的，因此要考虑数据库的并发问题，从代码和数据库设计两方面进行优化
4.由于前端页面的限制，有些功能并没有实现
5.JSP页面中的Java脚本实在是非常丑陋，下次一定不能直接在JSP页面中添加java脚本，比如博客分页的功能全部写在JSP页面里实在是非常乱
6.异常和错误处理，数据库操作中如果由于某些原因回滚或者失败了应当给用户反馈，我没有作处理
